// tslint:disable
/**
 * @scaffoldme-microservices/projects-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.17-alpha.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { NewProjectInfos } from '../models';
import { ProjectInfos } from '../models';
import { ProjectInfosWithRelations } from '../models';
/**
 * ProjectInfosControllerApi - axios parameter creator
 * @export
 */
export const ProjectInfosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewProjectInfos} [newProjectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos?: NewProjectInfos, options: any = {}): RequestArgs {
            const localVarPath = `/project-infos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof newProjectInfos !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newProjectInfos !== undefined ? newProjectInfos : {}) : (newProjectInfos || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectInfosControllerFind.');
            }
            const localVarPath = `/users/{id}/projects-infos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectInfosControllerApi - functional programming interface
 * @export
 */
export const ProjectInfosControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewProjectInfos} [newProjectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos?: NewProjectInfos, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInfos> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerCreate(newProjectInfos, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectInfosWithRelations>> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerFind(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectInfosControllerApi - factory interface
 * @export
 */
export const ProjectInfosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {NewProjectInfos} [newProjectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos?: NewProjectInfos, options?: any): AxiosPromise<ProjectInfos> {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerCreate(newProjectInfos, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(id: string, options?: any): AxiosPromise<Array<ProjectInfosWithRelations>> {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerFind(id, options)(axios, basePath);
        },
    };
};

/**
 * ProjectInfosControllerApi - object-oriented interface
 * @export
 * @class ProjectInfosControllerApi
 * @extends {BaseAPI}
 */
export class ProjectInfosControllerApi extends BaseAPI {
    /**
     * 
     * @param {NewProjectInfos} [newProjectInfos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerCreate(newProjectInfos?: NewProjectInfos, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerCreate(newProjectInfos, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerFind(id: string, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerFind(id, options)(this.axios, this.basePath);
    }

}
