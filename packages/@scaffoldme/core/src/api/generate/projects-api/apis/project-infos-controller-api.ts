// tslint:disable
/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { LoopbackCount } from '../models';
import { NewProjectInfos } from '../models';
import { ProjectInfos } from '../models';
import { ProjectInfosPartial } from '../models';
/**
 * ProjectInfosControllerApi - axios parameter creator
 * @export
 */
export const ProjectInfosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/project-infos/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewProjectInfos} [newProjectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos?: NewProjectInfos, options: any = {}): RequestArgs {
            const localVarPath = `/project-infos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof newProjectInfos !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newProjectInfos !== undefined ? newProjectInfos : {}) : (newProjectInfos || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectInfosControllerDeleteById.');
            }
            const localVarPath = `/project-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(filter?: object, options: any = {}): RequestArgs {
            const localVarPath = `/project-infos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFindById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectInfosControllerFindById.');
            }
            const localVarPath = `/project-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectInfos} [projectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerReplaceById(id: number, projectInfos?: ProjectInfos, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectInfosControllerReplaceById.');
            }
            const localVarPath = `/project-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof projectInfos !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectInfos !== undefined ? projectInfos : {}) : (projectInfos || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectInfosPartial} [projectInfosPartial] 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateAll(projectInfosPartial?: ProjectInfosPartial, where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/project-infos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof projectInfosPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectInfosPartial !== undefined ? projectInfosPartial : {}) : (projectInfosPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectInfosPartial} [projectInfosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateById(id: number, projectInfosPartial?: ProjectInfosPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectInfosControllerUpdateById.');
            }
            const localVarPath = `/project-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof projectInfosPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectInfosPartial !== undefined ? projectInfosPartial : {}) : (projectInfosPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectInfosControllerApi - functional programming interface
 * @export
 */
export const ProjectInfosControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewProjectInfos} [newProjectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos?: NewProjectInfos, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInfos> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerCreate(newProjectInfos, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectInfos>> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFindById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInfos> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerFindById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectInfos} [projectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerReplaceById(id: number, projectInfos?: ProjectInfos, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerReplaceById(id, projectInfos, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ProjectInfosPartial} [projectInfosPartial] 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateAll(projectInfosPartial?: ProjectInfosPartial, where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerUpdateAll(projectInfosPartial, where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectInfosPartial} [projectInfosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateById(id: number, projectInfosPartial?: ProjectInfosPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerUpdateById(id, projectInfosPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectInfosControllerApi - factory interface
 * @export
 */
export const ProjectInfosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCount(where?: { [key: string]: object; }, options?: any) {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewProjectInfos} [newProjectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos?: NewProjectInfos, options?: any) {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerCreate(newProjectInfos, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerDeleteById(id: number, options?: any) {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(filter?: object, options?: any) {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFindById(id: number, options?: any) {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerFindById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectInfos} [projectInfos] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerReplaceById(id: number, projectInfos?: ProjectInfos, options?: any) {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerReplaceById(id, projectInfos, options)(axios, basePath);
        },
        /**
         * 
         * @param {ProjectInfosPartial} [projectInfosPartial] 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateAll(projectInfosPartial?: ProjectInfosPartial, where?: { [key: string]: object; }, options?: any) {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerUpdateAll(projectInfosPartial, where, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProjectInfosPartial} [projectInfosPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateById(id: number, projectInfosPartial?: ProjectInfosPartial, options?: any) {
            return ProjectInfosControllerApiFp(configuration).projectInfosControllerUpdateById(id, projectInfosPartial, options)(axios, basePath);
        },
    };
};

/**
 * ProjectInfosControllerApi - object-oriented interface
 * @export
 * @class ProjectInfosControllerApi
 * @extends {BaseAPI}
 */
export class ProjectInfosControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerCount(where?: { [key: string]: object; }, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewProjectInfos} [newProjectInfos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerCreate(newProjectInfos?: NewProjectInfos, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerCreate(newProjectInfos, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerDeleteById(id: number, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerFind(filter?: object, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerFindById(id: number, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerFindById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {ProjectInfos} [projectInfos] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerReplaceById(id: number, projectInfos?: ProjectInfos, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerReplaceById(id, projectInfos, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ProjectInfosPartial} [projectInfosPartial] 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerUpdateAll(projectInfosPartial?: ProjectInfosPartial, where?: { [key: string]: object; }, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerUpdateAll(projectInfosPartial, where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {ProjectInfosPartial} [projectInfosPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    public projectInfosControllerUpdateById(id: number, projectInfosPartial?: ProjectInfosPartial, options?: any) {
        return ProjectInfosControllerApiFp(this.configuration).projectInfosControllerUpdateById(id, projectInfosPartial, options)(this.axios, this.basePath);
    }

}
