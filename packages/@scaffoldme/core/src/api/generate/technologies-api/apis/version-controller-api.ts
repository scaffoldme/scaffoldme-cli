// tslint:disable
/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { NewVersion } from '../models';
import { Version } from '../models';
import { VersionPartial } from '../models';
/**
 * VersionControllerApi - axios parameter creator
 * @export
 */
export const VersionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewVersion} [newVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerCreate(newVersion?: NewVersion, options: any = {}): RequestArgs {
            const localVarPath = `/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof newVersion !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newVersion !== undefined ? newVersion : {}) : (newVersion || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling versionControllerDeleteById.');
            }
            const localVarPath = `/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFind(filter?: object, options: any = {}): RequestArgs {
            const localVarPath = `/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling versionControllerFindById.');
            }
            const localVarPath = `/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindCompatibleTechnologiesFromVersion(versionId: number, options: any = {}): RequestArgs {
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling versionControllerFindCompatibleTechnologiesFromVersion.');
            }
            const localVarPath = `/versions/{versionId}/compatibles-versions`
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Version} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerReplaceById(id: number, version?: Version, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling versionControllerReplaceById.');
            }
            const localVarPath = `/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof version !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(version !== undefined ? version : {}) : (version || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {VersionPartial} [versionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerUpdateById(id: number, versionPartial?: VersionPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling versionControllerUpdateById.');
            }
            const localVarPath = `/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof versionPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(versionPartial !== undefined ? versionPartial : {}) : (versionPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionControllerApi - functional programming interface
 * @export
 */
export const VersionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewVersion} [newVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerCreate(newVersion?: NewVersion, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version> {
            const localVarAxiosArgs = VersionControllerApiAxiosParamCreator(configuration).versionControllerCreate(newVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = VersionControllerApiAxiosParamCreator(configuration).versionControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFind(filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Version>> {
            const localVarAxiosArgs = VersionControllerApiAxiosParamCreator(configuration).versionControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version> {
            const localVarAxiosArgs = VersionControllerApiAxiosParamCreator(configuration).versionControllerFindById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindCompatibleTechnologiesFromVersion(versionId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Version>> {
            const localVarAxiosArgs = VersionControllerApiAxiosParamCreator(configuration).versionControllerFindCompatibleTechnologiesFromVersion(versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Version} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerReplaceById(id: number, version?: Version, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = VersionControllerApiAxiosParamCreator(configuration).versionControllerReplaceById(id, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {VersionPartial} [versionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerUpdateById(id: number, versionPartial?: VersionPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = VersionControllerApiAxiosParamCreator(configuration).versionControllerUpdateById(id, versionPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VersionControllerApi - factory interface
 * @export
 */
export const VersionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {NewVersion} [newVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerCreate(newVersion?: NewVersion, options?: any) {
            return VersionControllerApiFp(configuration).versionControllerCreate(newVersion, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerDeleteById(id: number, options?: any) {
            return VersionControllerApiFp(configuration).versionControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFind(filter?: object, options?: any) {
            return VersionControllerApiFp(configuration).versionControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindById(id: number, options?: any) {
            return VersionControllerApiFp(configuration).versionControllerFindById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindCompatibleTechnologiesFromVersion(versionId: number, options?: any) {
            return VersionControllerApiFp(configuration).versionControllerFindCompatibleTechnologiesFromVersion(versionId, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Version} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerReplaceById(id: number, version?: Version, options?: any) {
            return VersionControllerApiFp(configuration).versionControllerReplaceById(id, version, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {VersionPartial} [versionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerUpdateById(id: number, versionPartial?: VersionPartial, options?: any) {
            return VersionControllerApiFp(configuration).versionControllerUpdateById(id, versionPartial, options)(axios, basePath);
        },
    };
};

/**
 * VersionControllerApi - object-oriented interface
 * @export
 * @class VersionControllerApi
 * @extends {BaseAPI}
 */
export class VersionControllerApi extends BaseAPI {
    /**
     * 
     * @param {NewVersion} [newVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    public versionControllerCreate(newVersion?: NewVersion, options?: any) {
        return VersionControllerApiFp(this.configuration).versionControllerCreate(newVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    public versionControllerDeleteById(id: number, options?: any) {
        return VersionControllerApiFp(this.configuration).versionControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    public versionControllerFind(filter?: object, options?: any) {
        return VersionControllerApiFp(this.configuration).versionControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    public versionControllerFindById(id: number, options?: any) {
        return VersionControllerApiFp(this.configuration).versionControllerFindById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} versionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    public versionControllerFindCompatibleTechnologiesFromVersion(versionId: number, options?: any) {
        return VersionControllerApiFp(this.configuration).versionControllerFindCompatibleTechnologiesFromVersion(versionId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Version} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    public versionControllerReplaceById(id: number, version?: Version, options?: any) {
        return VersionControllerApiFp(this.configuration).versionControllerReplaceById(id, version, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {VersionPartial} [versionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    public versionControllerUpdateById(id: number, versionPartial?: VersionPartial, options?: any) {
        return VersionControllerApiFp(this.configuration).versionControllerUpdateById(id, versionPartial, options)(this.axios, this.basePath);
    }

}
