// tslint:disable
/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { NewTechnology } from '../models';
import { Technology } from '../models';
import { TechnologyPartial } from '../models';
import { TechnologyWithRelations } from '../models';
import { Version } from '../models';
/**
 * TechnologyControllerApi - axios parameter creator
 * @export
 */
export const TechnologyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewTechnology} [newTechnology] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreate(newTechnology?: NewTechnology, options: any = {}): RequestArgs {
            const localVarPath = `/technologies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof newTechnology !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newTechnology !== undefined ? newTechnology : {}) : (newTechnology || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Version} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreateVersion(id: number, version?: Version, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling technologyControllerCreateVersion.');
            }
            const localVarPath = `/technologies/{id}/version`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof version !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(version !== undefined ? version : {}) : (version || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling technologyControllerDeleteById.');
            }
            const localVarPath = `/technologies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFind(filter?: object, options: any = {}): RequestArgs {
            const localVarPath = `/technologies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFindById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling technologyControllerFindById.');
            }
            const localVarPath = `/technologies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Technology} [technology] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerReplaceById(id: number, technology?: Technology, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling technologyControllerReplaceById.');
            }
            const localVarPath = `/technologies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof technology !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(technology !== undefined ? technology : {}) : (technology || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TechnologyPartial} [technologyPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerUpdateById(id: number, technologyPartial?: TechnologyPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling technologyControllerUpdateById.');
            }
            const localVarPath = `/technologies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof technologyPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(technologyPartial !== undefined ? technologyPartial : {}) : (technologyPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TechnologyControllerApi - functional programming interface
 * @export
 */
export const TechnologyControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {NewTechnology} [newTechnology] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreate(newTechnology?: NewTechnology, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Technology> {
            const localVarAxiosArgs = TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerCreate(newTechnology, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Version} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreateVersion(id: number, version?: Version, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerCreateVersion(id, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFind(filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TechnologyWithRelations>> {
            const localVarAxiosArgs = TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFindById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Technology> {
            const localVarAxiosArgs = TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerFindById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Technology} [technology] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerReplaceById(id: number, technology?: Technology, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerReplaceById(id, technology, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TechnologyPartial} [technologyPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerUpdateById(id: number, technologyPartial?: TechnologyPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerUpdateById(id, technologyPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TechnologyControllerApi - factory interface
 * @export
 */
export const TechnologyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {NewTechnology} [newTechnology] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreate(newTechnology?: NewTechnology, options?: any) {
            return TechnologyControllerApiFp(configuration).technologyControllerCreate(newTechnology, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Version} [version] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreateVersion(id: number, version?: Version, options?: any) {
            return TechnologyControllerApiFp(configuration).technologyControllerCreateVersion(id, version, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerDeleteById(id: number, options?: any) {
            return TechnologyControllerApiFp(configuration).technologyControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFind(filter?: object, options?: any) {
            return TechnologyControllerApiFp(configuration).technologyControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFindById(id: number, options?: any) {
            return TechnologyControllerApiFp(configuration).technologyControllerFindById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Technology} [technology] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerReplaceById(id: number, technology?: Technology, options?: any) {
            return TechnologyControllerApiFp(configuration).technologyControllerReplaceById(id, technology, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TechnologyPartial} [technologyPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerUpdateById(id: number, technologyPartial?: TechnologyPartial, options?: any) {
            return TechnologyControllerApiFp(configuration).technologyControllerUpdateById(id, technologyPartial, options)(axios, basePath);
        },
    };
};

/**
 * TechnologyControllerApi - object-oriented interface
 * @export
 * @class TechnologyControllerApi
 * @extends {BaseAPI}
 */
export class TechnologyControllerApi extends BaseAPI {
    /**
     * 
     * @param {NewTechnology} [newTechnology] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    public technologyControllerCreate(newTechnology?: NewTechnology, options?: any) {
        return TechnologyControllerApiFp(this.configuration).technologyControllerCreate(newTechnology, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Version} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    public technologyControllerCreateVersion(id: number, version?: Version, options?: any) {
        return TechnologyControllerApiFp(this.configuration).technologyControllerCreateVersion(id, version, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    public technologyControllerDeleteById(id: number, options?: any) {
        return TechnologyControllerApiFp(this.configuration).technologyControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    public technologyControllerFind(filter?: object, options?: any) {
        return TechnologyControllerApiFp(this.configuration).technologyControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    public technologyControllerFindById(id: number, options?: any) {
        return TechnologyControllerApiFp(this.configuration).technologyControllerFindById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Technology} [technology] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    public technologyControllerReplaceById(id: number, technology?: Technology, options?: any) {
        return TechnologyControllerApiFp(this.configuration).technologyControllerReplaceById(id, technology, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {TechnologyPartial} [technologyPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    public technologyControllerUpdateById(id: number, technologyPartial?: TechnologyPartial, options?: any) {
        return TechnologyControllerApiFp(this.configuration).technologyControllerUpdateById(id, technologyPartial, options)(this.axios, this.basePath);
    }

}
