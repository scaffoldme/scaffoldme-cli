/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { NewVersion } from '../models';
import { Version } from '../models';
import { VersionPartial } from '../models';
/**
 * VersionControllerApi - axios parameter creator
 * @export
 */
export declare const VersionControllerApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {NewVersion} [newVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerCreate(newVersion?: NewVersion | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerDeleteById(id: number, options?: any): RequestArgs;
    /**
     *
     * @param {object} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFind(filter?: object | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFindById(id: number, options?: any): RequestArgs;
    /**
     *
     * @param {number} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFindCompatibleTechnologiesFromVersion(versionId: number, options?: any): RequestArgs;
    /**
     *
     * @param {number} id
     * @param {Version} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerReplaceById(id: number, version?: Version | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {number} id
     * @param {VersionPartial} [versionPartial]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerUpdateById(id: number, versionPartial?: VersionPartial | undefined, options?: any): RequestArgs;
};
/**
 * VersionControllerApi - functional programming interface
 * @export
 */
export declare const VersionControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {NewVersion} [newVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerCreate(newVersion?: NewVersion | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Version>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {object} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFind(filter?: object | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Version[]>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFindById(id: number, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Version>;
    /**
     *
     * @param {number} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFindCompatibleTechnologiesFromVersion(versionId: number, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Version[]>;
    /**
     *
     * @param {number} id
     * @param {Version} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerReplaceById(id: number, version?: Version | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {number} id
     * @param {VersionPartial} [versionPartial]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerUpdateById(id: number, versionPartial?: VersionPartial | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
};
/**
 * VersionControllerApi - factory interface
 * @export
 */
export declare const VersionControllerApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {NewVersion} [newVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerCreate(newVersion?: NewVersion | undefined, options?: any): AxiosPromise<Version>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerDeleteById(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {object} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFind(filter?: object | undefined, options?: any): AxiosPromise<Version[]>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFindById(id: number, options?: any): AxiosPromise<Version>;
    /**
     *
     * @param {number} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerFindCompatibleTechnologiesFromVersion(versionId: number, options?: any): AxiosPromise<Version[]>;
    /**
     *
     * @param {number} id
     * @param {Version} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerReplaceById(id: number, version?: Version | undefined, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} id
     * @param {VersionPartial} [versionPartial]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionControllerUpdateById(id: number, versionPartial?: VersionPartial | undefined, options?: any): AxiosPromise<void>;
};
/**
 * VersionControllerApi - object-oriented interface
 * @export
 * @class VersionControllerApi
 * @extends {BaseAPI}
 */
export declare class VersionControllerApi extends BaseAPI {
    /**
     *
     * @param {NewVersion} [newVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerCreate(newVersion?: NewVersion, options?: any): AxiosPromise<Version>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerDeleteById(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {object} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerFind(filter?: object, options?: any): AxiosPromise<Version[]>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerFindById(id: number, options?: any): AxiosPromise<Version>;
    /**
     *
     * @param {number} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerFindCompatibleTechnologiesFromVersion(versionId: number, options?: any): AxiosPromise<Version[]>;
    /**
     *
     * @param {number} id
     * @param {Version} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerReplaceById(id: number, version?: Version, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} id
     * @param {VersionPartial} [versionPartial]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerUpdateById(id: number, versionPartial?: VersionPartial, options?: any): AxiosPromise<void>;
}
