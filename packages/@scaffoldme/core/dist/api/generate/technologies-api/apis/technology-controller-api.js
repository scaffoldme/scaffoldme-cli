"use strict";
// tslint:disable
/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const globalImportUrl = tslib_1.__importStar(require("url"));
const axios_1 = tslib_1.__importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * TechnologyControllerApi - axios parameter creator
 * @export
 */
exports.TechnologyControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {NewTechnology} [newTechnology]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreate(newTechnology, options = {}) {
            const localVarPath = `/technologies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof newTechnology !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(newTechnology !== undefined ? newTechnology : {}) : (newTechnology || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {Version} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreateVersion(id, version, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling technologyControllerCreateVersion.');
            }
            const localVarPath = `/technologies/{id}/version`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof version !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(version !== undefined ? version : {}) : (version || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerDeleteById(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling technologyControllerDeleteById.');
            }
            const localVarPath = `/technologies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFind(filter, options = {}) {
            const localVarPath = `/technologies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFindById(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling technologyControllerFindById.');
            }
            const localVarPath = `/technologies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {Technology} [technology]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerReplaceById(id, technology, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling technologyControllerReplaceById.');
            }
            const localVarPath = `/technologies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof technology !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(technology !== undefined ? technology : {}) : (technology || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {TechnologyPartial} [technologyPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerUpdateById(id, technologyPartial, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling technologyControllerUpdateById.');
            }
            const localVarPath = `/technologies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof technologyPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(technologyPartial !== undefined ? technologyPartial : {}) : (technologyPartial || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TechnologyControllerApi - functional programming interface
 * @export
 */
exports.TechnologyControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {NewTechnology} [newTechnology]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreate(newTechnology, options) {
            const localVarAxiosArgs = exports.TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerCreate(newTechnology, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {Version} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreateVersion(id, version, options) {
            const localVarAxiosArgs = exports.TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerCreateVersion(id, version, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerDeleteById(id, options) {
            const localVarAxiosArgs = exports.TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerDeleteById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFind(filter, options) {
            const localVarAxiosArgs = exports.TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerFind(filter, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFindById(id, options) {
            const localVarAxiosArgs = exports.TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerFindById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {Technology} [technology]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerReplaceById(id, technology, options) {
            const localVarAxiosArgs = exports.TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerReplaceById(id, technology, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {TechnologyPartial} [technologyPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerUpdateById(id, technologyPartial, options) {
            const localVarAxiosArgs = exports.TechnologyControllerApiAxiosParamCreator(configuration).technologyControllerUpdateById(id, technologyPartial, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TechnologyControllerApi - factory interface
 * @export
 */
exports.TechnologyControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {NewTechnology} [newTechnology]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreate(newTechnology, options) {
            return exports.TechnologyControllerApiFp(configuration).technologyControllerCreate(newTechnology, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {Version} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerCreateVersion(id, version, options) {
            return exports.TechnologyControllerApiFp(configuration).technologyControllerCreateVersion(id, version, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerDeleteById(id, options) {
            return exports.TechnologyControllerApiFp(configuration).technologyControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFind(filter, options) {
            return exports.TechnologyControllerApiFp(configuration).technologyControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerFindById(id, options) {
            return exports.TechnologyControllerApiFp(configuration).technologyControllerFindById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {Technology} [technology]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerReplaceById(id, technology, options) {
            return exports.TechnologyControllerApiFp(configuration).technologyControllerReplaceById(id, technology, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {TechnologyPartial} [technologyPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technologyControllerUpdateById(id, technologyPartial, options) {
            return exports.TechnologyControllerApiFp(configuration).technologyControllerUpdateById(id, technologyPartial, options)(axios, basePath);
        },
    };
};
/**
 * TechnologyControllerApi - object-oriented interface
 * @export
 * @class TechnologyControllerApi
 * @extends {BaseAPI}
 */
class TechnologyControllerApi extends base_1.BaseAPI {
    /**
     *
     * @param {NewTechnology} [newTechnology]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    technologyControllerCreate(newTechnology, options) {
        return exports.TechnologyControllerApiFp(this.configuration).technologyControllerCreate(newTechnology, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {Version} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    technologyControllerCreateVersion(id, version, options) {
        return exports.TechnologyControllerApiFp(this.configuration).technologyControllerCreateVersion(id, version, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    technologyControllerDeleteById(id, options) {
        return exports.TechnologyControllerApiFp(this.configuration).technologyControllerDeleteById(id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {object} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    technologyControllerFind(filter, options) {
        return exports.TechnologyControllerApiFp(this.configuration).technologyControllerFind(filter, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    technologyControllerFindById(id, options) {
        return exports.TechnologyControllerApiFp(this.configuration).technologyControllerFindById(id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {Technology} [technology]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    technologyControllerReplaceById(id, technology, options) {
        return exports.TechnologyControllerApiFp(this.configuration).technologyControllerReplaceById(id, technology, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {TechnologyPartial} [technologyPartial]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnologyControllerApi
     */
    technologyControllerUpdateById(id, technologyPartial, options) {
        return exports.TechnologyControllerApiFp(this.configuration).technologyControllerUpdateById(id, technologyPartial, options)(this.axios, this.basePath);
    }
}
exports.TechnologyControllerApi = TechnologyControllerApi;
