"use strict";
// tslint:disable
/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * VersionControllerApi - axios parameter creator
 * @export
 */
exports.VersionControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {NewVersion} [newVersion]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerCreate(newVersion, options = {}) {
            const localVarPath = `/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof newVersion !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(newVersion !== undefined ? newVersion : {}) : (newVersion || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerDeleteById(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling versionControllerDeleteById.');
            }
            const localVarPath = `/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFind(filter, options = {}) {
            const localVarPath = `/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindById(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling versionControllerFindById.');
            }
            const localVarPath = `/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindCompatibleTechnologiesFromVersion(versionId, options = {}) {
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new base_1.RequiredError('versionId', 'Required parameter versionId was null or undefined when calling versionControllerFindCompatibleTechnologiesFromVersion.');
            }
            const localVarPath = `/versions/{versionId}/compatibles-versions`
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {Version} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerReplaceById(id, version, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling versionControllerReplaceById.');
            }
            const localVarPath = `/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof version !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(version !== undefined ? version : {}) : (version || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {VersionPartial} [versionPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerUpdateById(id, versionPartial, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling versionControllerUpdateById.');
            }
            const localVarPath = `/versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof versionPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(versionPartial !== undefined ? versionPartial : {}) : (versionPartial || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * VersionControllerApi - functional programming interface
 * @export
 */
exports.VersionControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {NewVersion} [newVersion]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerCreate(newVersion, options) {
            const localVarAxiosArgs = exports.VersionControllerApiAxiosParamCreator(configuration).versionControllerCreate(newVersion, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerDeleteById(id, options) {
            const localVarAxiosArgs = exports.VersionControllerApiAxiosParamCreator(configuration).versionControllerDeleteById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFind(filter, options) {
            const localVarAxiosArgs = exports.VersionControllerApiAxiosParamCreator(configuration).versionControllerFind(filter, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindById(id, options) {
            const localVarAxiosArgs = exports.VersionControllerApiAxiosParamCreator(configuration).versionControllerFindById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindCompatibleTechnologiesFromVersion(versionId, options) {
            const localVarAxiosArgs = exports.VersionControllerApiAxiosParamCreator(configuration).versionControllerFindCompatibleTechnologiesFromVersion(versionId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {Version} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerReplaceById(id, version, options) {
            const localVarAxiosArgs = exports.VersionControllerApiAxiosParamCreator(configuration).versionControllerReplaceById(id, version, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {VersionPartial} [versionPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerUpdateById(id, versionPartial, options) {
            const localVarAxiosArgs = exports.VersionControllerApiAxiosParamCreator(configuration).versionControllerUpdateById(id, versionPartial, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * VersionControllerApi - factory interface
 * @export
 */
exports.VersionControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {NewVersion} [newVersion]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerCreate(newVersion, options) {
            return exports.VersionControllerApiFp(configuration).versionControllerCreate(newVersion, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerDeleteById(id, options) {
            return exports.VersionControllerApiFp(configuration).versionControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFind(filter, options) {
            return exports.VersionControllerApiFp(configuration).versionControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindById(id, options) {
            return exports.VersionControllerApiFp(configuration).versionControllerFindById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {number} versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerFindCompatibleTechnologiesFromVersion(versionId, options) {
            return exports.VersionControllerApiFp(configuration).versionControllerFindCompatibleTechnologiesFromVersion(versionId, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {Version} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerReplaceById(id, version, options) {
            return exports.VersionControllerApiFp(configuration).versionControllerReplaceById(id, version, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {VersionPartial} [versionPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionControllerUpdateById(id, versionPartial, options) {
            return exports.VersionControllerApiFp(configuration).versionControllerUpdateById(id, versionPartial, options)(axios, basePath);
        },
    };
};
/**
 * VersionControllerApi - object-oriented interface
 * @export
 * @class VersionControllerApi
 * @extends {BaseAPI}
 */
class VersionControllerApi extends base_1.BaseAPI {
    /**
     *
     * @param {NewVersion} [newVersion]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerCreate(newVersion, options) {
        return exports.VersionControllerApiFp(this.configuration).versionControllerCreate(newVersion, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerDeleteById(id, options) {
        return exports.VersionControllerApiFp(this.configuration).versionControllerDeleteById(id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {object} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerFind(filter, options) {
        return exports.VersionControllerApiFp(this.configuration).versionControllerFind(filter, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerFindById(id, options) {
        return exports.VersionControllerApiFp(this.configuration).versionControllerFindById(id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerFindCompatibleTechnologiesFromVersion(versionId, options) {
        return exports.VersionControllerApiFp(this.configuration).versionControllerFindCompatibleTechnologiesFromVersion(versionId, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {Version} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerReplaceById(id, version, options) {
        return exports.VersionControllerApiFp(this.configuration).versionControllerReplaceById(id, version, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {VersionPartial} [versionPartial]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionControllerApi
     */
    versionControllerUpdateById(id, versionPartial, options) {
        return exports.VersionControllerApiFp(this.configuration).versionControllerUpdateById(id, versionPartial, options)(this.axios, this.basePath);
    }
}
exports.VersionControllerApi = VersionControllerApi;
