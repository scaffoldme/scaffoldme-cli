"use strict";
// tslint:disable
/**
 * LoopBack Application
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globalImportUrl = require("url");
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
/**
 * ProjectInfosControllerApi - axios parameter creator
 * @export
 */
exports.ProjectInfosControllerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCount(where, options = {}) {
            const localVarPath = `/project-infos/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {NewProjectInfos} [newProjectInfos]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos, options = {}) {
            const localVarPath = `/project-infos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof newProjectInfos !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(newProjectInfos !== undefined ? newProjectInfos : {}) : (newProjectInfos || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerDeleteById(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling projectInfosControllerDeleteById.');
            }
            const localVarPath = `/project-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(filter, options = {}) {
            const localVarPath = `/project-infos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFindById(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling projectInfosControllerFindById.');
            }
            const localVarPath = `/project-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {ProjectInfos} [projectInfos]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerReplaceById(id, projectInfos, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling projectInfosControllerReplaceById.');
            }
            const localVarPath = `/project-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof projectInfos !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(projectInfos !== undefined ? projectInfos : {}) : (projectInfos || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ProjectInfosPartial} [projectInfosPartial]
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateAll(projectInfosPartial, where, options = {}) {
            const localVarPath = `/project-infos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof projectInfosPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(projectInfosPartial !== undefined ? projectInfosPartial : {}) : (projectInfosPartial || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {ProjectInfosPartial} [projectInfosPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateById(id, projectInfosPartial, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new base_1.RequiredError('id', 'Required parameter id was null or undefined when calling projectInfosControllerUpdateById.');
            }
            const localVarPath = `/project-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = (typeof projectInfosPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(projectInfosPartial !== undefined ? projectInfosPartial : {}) : (projectInfosPartial || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProjectInfosControllerApi - functional programming interface
 * @export
 */
exports.ProjectInfosControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCount(where, options) {
            const localVarAxiosArgs = exports.ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerCount(where, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {NewProjectInfos} [newProjectInfos]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos, options) {
            const localVarAxiosArgs = exports.ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerCreate(newProjectInfos, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerDeleteById(id, options) {
            const localVarAxiosArgs = exports.ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerDeleteById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(filter, options) {
            const localVarAxiosArgs = exports.ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerFind(filter, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFindById(id, options) {
            const localVarAxiosArgs = exports.ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerFindById(id, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {ProjectInfos} [projectInfos]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerReplaceById(id, projectInfos, options) {
            const localVarAxiosArgs = exports.ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerReplaceById(id, projectInfos, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {ProjectInfosPartial} [projectInfosPartial]
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateAll(projectInfosPartial, where, options) {
            const localVarAxiosArgs = exports.ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerUpdateAll(projectInfosPartial, where, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {ProjectInfosPartial} [projectInfosPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateById(id, projectInfosPartial, options) {
            const localVarAxiosArgs = exports.ProjectInfosControllerApiAxiosParamCreator(configuration).projectInfosControllerUpdateById(id, projectInfosPartial, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ProjectInfosControllerApi - factory interface
 * @export
 */
exports.ProjectInfosControllerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCount(where, options) {
            return exports.ProjectInfosControllerApiFp(configuration).projectInfosControllerCount(where, options)(axios, basePath);
        },
        /**
         *
         * @param {NewProjectInfos} [newProjectInfos]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerCreate(newProjectInfos, options) {
            return exports.ProjectInfosControllerApiFp(configuration).projectInfosControllerCreate(newProjectInfos, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerDeleteById(id, options) {
            return exports.ProjectInfosControllerApiFp(configuration).projectInfosControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {object} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFind(filter, options) {
            return exports.ProjectInfosControllerApiFp(configuration).projectInfosControllerFind(filter, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerFindById(id, options) {
            return exports.ProjectInfosControllerApiFp(configuration).projectInfosControllerFindById(id, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {ProjectInfos} [projectInfos]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerReplaceById(id, projectInfos, options) {
            return exports.ProjectInfosControllerApiFp(configuration).projectInfosControllerReplaceById(id, projectInfos, options)(axios, basePath);
        },
        /**
         *
         * @param {ProjectInfosPartial} [projectInfosPartial]
         * @param {{ [key: string]: object; }} [where]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateAll(projectInfosPartial, where, options) {
            return exports.ProjectInfosControllerApiFp(configuration).projectInfosControllerUpdateAll(projectInfosPartial, where, options)(axios, basePath);
        },
        /**
         *
         * @param {number} id
         * @param {ProjectInfosPartial} [projectInfosPartial]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInfosControllerUpdateById(id, projectInfosPartial, options) {
            return exports.ProjectInfosControllerApiFp(configuration).projectInfosControllerUpdateById(id, projectInfosPartial, options)(axios, basePath);
        },
    };
};
/**
 * ProjectInfosControllerApi - object-oriented interface
 * @export
 * @class ProjectInfosControllerApi
 * @extends {BaseAPI}
 */
class ProjectInfosControllerApi extends base_1.BaseAPI {
    /**
     *
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    projectInfosControllerCount(where, options) {
        return exports.ProjectInfosControllerApiFp(this.configuration).projectInfosControllerCount(where, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {NewProjectInfos} [newProjectInfos]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    projectInfosControllerCreate(newProjectInfos, options) {
        return exports.ProjectInfosControllerApiFp(this.configuration).projectInfosControllerCreate(newProjectInfos, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    projectInfosControllerDeleteById(id, options) {
        return exports.ProjectInfosControllerApiFp(this.configuration).projectInfosControllerDeleteById(id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {object} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    projectInfosControllerFind(filter, options) {
        return exports.ProjectInfosControllerApiFp(this.configuration).projectInfosControllerFind(filter, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    projectInfosControllerFindById(id, options) {
        return exports.ProjectInfosControllerApiFp(this.configuration).projectInfosControllerFindById(id, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {ProjectInfos} [projectInfos]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    projectInfosControllerReplaceById(id, projectInfos, options) {
        return exports.ProjectInfosControllerApiFp(this.configuration).projectInfosControllerReplaceById(id, projectInfos, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {ProjectInfosPartial} [projectInfosPartial]
     * @param {{ [key: string]: object; }} [where]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    projectInfosControllerUpdateAll(projectInfosPartial, where, options) {
        return exports.ProjectInfosControllerApiFp(this.configuration).projectInfosControllerUpdateAll(projectInfosPartial, where, options)(this.axios, this.basePath);
    }
    /**
     *
     * @param {number} id
     * @param {ProjectInfosPartial} [projectInfosPartial]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInfosControllerApi
     */
    projectInfosControllerUpdateById(id, projectInfosPartial, options) {
        return exports.ProjectInfosControllerApiFp(this.configuration).projectInfosControllerUpdateById(id, projectInfosPartial, options)(this.axios, this.basePath);
    }
}
exports.ProjectInfosControllerApi = ProjectInfosControllerApi;
